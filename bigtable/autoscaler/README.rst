.. This file is automatically generated. Do not edit this file directly.

Google Cloud Bigtable Python Samples
===============================================================================

This directory contains samples for Google Cloud Bigtable. `Google Cloud Bigtable`_ is Google's NoSQL Big Data database service. It's the same database that powers many core Google services, including Search, Analytics, Maps, and Gmail.


This sample demonstrates using `Stackdriver monitoring`_,
to scale Cloud Bigtable based on CPU usage.

.. _Stackdriver Monitoring: http://cloud.google.com/monitoring/docs


.. _Google Cloud Bigtable: https://cloud.google.com/bigtable/docs 

Setup
-------------------------------------------------------------------------------


Authentication
++++++++++++++

Authentication is typically done through `Application Default Credentials`_,
which means you do not have to change the code to authenticate as long as
your environment has credentials. You have a few options for setting up
authentication:

#. When running locally, use the `Google Cloud SDK`_

    .. code-block:: bash

        gcloud auth application-default login


#. When running on App Engine or Compute Engine, credentials are already
   set-up. However, you may need to configure your Compute Engine instance
   with `additional scopes`_.

#. You can create a `Service Account key file`_. This file can be used to
   authenticate to Google Cloud Platform services from any environment. To use
   the file, set the ``GOOGLE_APPLICATION_CREDENTIALS`` environment variable to
   the path to the key file, for example:

    .. code-block:: bash

        export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service_account.json

.. _Application Default Credentials: https://cloud.google.com/docs/authentication#getting_credentials_for_server-centric_flow
.. _additional scopes: https://cloud.google.com/compute/docs/authentication#using
.. _Service Account key file: https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatinganaccount

Install Dependencies
++++++++++++++++++++

#. Install `pip`_ and `virtualenv`_ if you do not already have them.

#. Create a virtualenv. Samples are compatible with Python 2.7 and 3.4+.

    .. code-block:: bash

        $ virtualenv env
        $ source env/bin/activate

#. Install the dependencies needed to run the samples.

    .. code-block:: bash

        $ pip install -r requirements.txt

.. _pip: https://pip.pypa.io/
.. _virtualenv: https://virtualenv.pypa.io/

Samples
-------------------------------------------------------------------------------

Autoscaling example
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



To run this sample:

.. code-block:: bash

    $ python autoscaler.py

    usage: autoscaler.py [-h] [--high_cpu_threshold HIGH_CPU_THRESHOLD]
                         [--low_cpu_threshold LOW_CPU_THRESHOLD]
                         [--short_sleep SHORT_SLEEP] [--long_sleep LONG_SLEEP]
                         bigtable_instance bigtable_cluster
    
    Scales Bigtable clusters based on CPU usage.
    
    positional arguments:
      bigtable_instance     ID of the Cloud Bigtable instance to connect to.
      bigtable_cluster      ID of the Cloud Bigtable cluster to connect to.
    
    optional arguments:
      -h, --help            show this help message and exit
      --high_cpu_threshold HIGH_CPU_THRESHOLD
                            If Bigtable CPU usages is above this threshold, scale
                            up
      --low_cpu_threshold LOW_CPU_THRESHOLD
                            If Bigtable CPU usages is above this threshold, scale
                            up
      --short_sleep SHORT_SLEEP
                            How long to sleep in seconds between checking metrics
                            after no scale operation
      --long_sleep LONG_SLEEP
                            How long to sleep in seconds between checking metrics
                            after a scaling operation




The client library
-------------------------------------------------------------------------------

This sample uses the `Google Cloud Client Library for Python`_.
You can read the documentation for more details on API usage and use GitHub
to `browse the source`_ and  `report issues`_.

.. _Google Cloud Client Library for Python:
    https://googlecloudplatform.github.io/google-cloud-python/
.. _browse the source:
    https://github.com/GoogleCloudPlatform/google-cloud-python
.. _report issues:
    https://github.com/GoogleCloudPlatform/google-cloud-python/issues


.. _Google Cloud SDK: https://cloud.google.com/sdk/